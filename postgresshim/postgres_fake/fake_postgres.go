// Code generated by counterfeiter. DO NOT EDIT.
package postgres_fake

import (
	"sync"

	"code.cloudfoundry.org/goshims/postgresshim"
	"github.com/lib/pq"
)

type FakePostgreSQL struct {
	ParseDSNStub        func(string) (*pq.Connector, error)
	parseDSNMutex       sync.RWMutex
	parseDSNArgsForCall []struct {
		arg1 string
	}
	parseDSNReturns struct {
		result1 *pq.Connector
		result2 error
	}
	parseDSNReturnsOnCall map[int]struct {
		result1 *pq.Connector
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePostgreSQL) ParseDSN(arg1 string) (*pq.Connector, error) {
	fake.parseDSNMutex.Lock()
	ret, specificReturn := fake.parseDSNReturnsOnCall[len(fake.parseDSNArgsForCall)]
	fake.parseDSNArgsForCall = append(fake.parseDSNArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ParseDSN", []interface{}{arg1})
	fake.parseDSNMutex.Unlock()
	if fake.ParseDSNStub != nil {
		return fake.ParseDSNStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.parseDSNReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePostgreSQL) ParseDSNCallCount() int {
	fake.parseDSNMutex.RLock()
	defer fake.parseDSNMutex.RUnlock()
	return len(fake.parseDSNArgsForCall)
}

func (fake *FakePostgreSQL) ParseDSNCalls(stub func(string) (*pq.Connector, error)) {
	fake.parseDSNMutex.Lock()
	defer fake.parseDSNMutex.Unlock()
	fake.ParseDSNStub = stub
}

func (fake *FakePostgreSQL) ParseDSNArgsForCall(i int) string {
	fake.parseDSNMutex.RLock()
	defer fake.parseDSNMutex.RUnlock()
	argsForCall := fake.parseDSNArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePostgreSQL) ParseDSNReturns(result1 *pq.Connector, result2 error) {
	fake.parseDSNMutex.Lock()
	defer fake.parseDSNMutex.Unlock()
	fake.ParseDSNStub = nil
	fake.parseDSNReturns = struct {
		result1 *pq.Connector
		result2 error
	}{result1, result2}
}

func (fake *FakePostgreSQL) ParseDSNReturnsOnCall(i int, result1 *pq.Connector, result2 error) {
	fake.parseDSNMutex.Lock()
	defer fake.parseDSNMutex.Unlock()
	fake.ParseDSNStub = nil
	if fake.parseDSNReturnsOnCall == nil {
		fake.parseDSNReturnsOnCall = make(map[int]struct {
			result1 *pq.Connector
			result2 error
		})
	}
	fake.parseDSNReturnsOnCall[i] = struct {
		result1 *pq.Connector
		result2 error
	}{result1, result2}
}

func (fake *FakePostgreSQL) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseDSNMutex.RLock()
	defer fake.parseDSNMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePostgreSQL) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ postgresshim.PostgreSQL = new(FakePostgreSQL)
