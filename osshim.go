// This file was generated by counterfeiter
package osshim

import (
	"os"
	"time"

	"github.com/cloudfoundry-incubator/osshim"
)

type Os struct{}

func (sh *Os) FindProcess(pid int) (*os.Process, error) {
	return osshim.FindProcess(pid)
}

func (sh *Os) StartProcess(name string, argv []string, attr *os.ProcAttr) (*os.Process, error) {
	return osshim.StartProcess(name, argv, attr)
}

func (sh *Os) Hostname() (name string, err error) {
	return osshim.Hostname()
}

func (sh *Os) Expand(s string, mapping func(string) string) string {
	return osshim.Expand(s, mapping)
}

func (sh *Os) ExpandEnv(s string) string {
	return osshim.ExpandEnv(s)
}

func (sh *Os) Getenv(key string) string {
	return osshim.Getenv(key)
}

func (sh *Os) LookupEnv(key string) (string, bool) {
	return osshim.LookupEnv(key)
}

func (sh *Os) Setenv(key string, value string) error {
	return osshim.Setenv(key, value)
}

func (sh *Os) Unsetenv(key string) error {
	return osshim.Unsetenv(key)
}

func (sh *Os) Clearenv() {
	osshim.Clearenv()
}

func (sh *Os) Environ() []string {
	return osshim.Environ()
}

func (sh *Os) NewSyscallError(syscall string, err error) error {
	return osshim.NewSyscallError(syscall, err)
}

func (sh *Os) IsExist(err error) bool {
	return osshim.IsExist(err)
}

func (sh *Os) IsNotExist(err error) bool {
	return osshim.IsNotExist(err)
}

func (sh *Os) IsPermission(err error) bool {
	return osshim.IsPermission(err)
}

func (sh *Os) Getpid() int {
	return osshim.Getpid()
}

func (sh *Os) Getppid() int {
	return osshim.Getppid()
}

func (sh *Os) Mkdir(name string, perm os.FileMode) error {
	return osshim.Mkdir(name, perm)
}

func (sh *Os) Chdir(dir string) error {
	return osshim.Chdir(dir)
}

func (sh *Os) Open(name string) (*os.File, error) {
	return osshim.Open(name)
}

func (sh *Os) Create(name string) (*os.File, error) {
	return osshim.Create(name)
}

func (sh *Os) Rename(oldpath string, newpath string) error {
	return osshim.Rename(oldpath, newpath)
}

func (sh *Os) NewFile(fd uintptr, name string) *os.File {
	return osshim.NewFile(fd, name)
}

func (sh *Os) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	return osshim.OpenFile(name, flag, perm)
}

func (sh *Os) Truncate(name string, size int64) error {
	return osshim.Truncate(name, size)
}

func (sh *Os) Remove(name string) error {
	return osshim.Remove(name)
}

func (sh *Os) Chmod(name string, mode os.FileMode) error {
	return osshim.Chmod(name, mode)
}

func (sh *Os) Chtimes(name string, atime time.Time, mtime time.Time) error {
	return osshim.Chtimes(name, atime, mtime)
}

func (sh *Os) Pipe() (r *os.File, w *os.File, err error) {
	return osshim.Pipe()
}

func (sh *Os) Link(oldname string, newname string) error {
	return osshim.Link(oldname, newname)
}

func (sh *Os) Symlink(oldname string, newname string) error {
	return osshim.Symlink(oldname, newname)
}

func (sh *Os) Readlink(name string) (string, error) {
	return osshim.Readlink(name)
}

func (sh *Os) Chown(name string, uid int, gid int) error {
	return osshim.Chown(name, uid, gid)
}

func (sh *Os) Lchown(name string, uid int, gid int) error {
	return osshim.Lchown(name, uid, gid)
}

func (sh *Os) TempDir() string {
	return osshim.TempDir()
}

func (sh *Os) Stat(name string) (os.FileInfo, error) {
	return osshim.Stat(name)
}

func (sh *Os) Lstat(name string) (os.FileInfo, error) {
	return osshim.Lstat(name)
}

func (sh *Os) Getwd() (dir string, err error) {
	return osshim.Getwd()
}

func (sh *Os) MkdirAll(path string, perm os.FileMode) error {
	return osshim.MkdirAll(path, perm)
}

func (sh *Os) RemoveAll(path string) error {
	return osshim.RemoveAll(path)
}

func (sh *Os) IsPathSeparator(c uint8) bool {
	return osshim.IsPathSeparator(c)
}

func (sh *Os) Getuid() int {
	return osshim.Getuid()
}

func (sh *Os) Geteuid() int {
	return osshim.Geteuid()
}

func (sh *Os) Getgid() int {
	return osshim.Getgid()
}

func (sh *Os) Getegid() int {
	return osshim.Getegid()
}

func (sh *Os) Getgroups() ([]int, error) {
	return osshim.Getgroups()
}

func (sh *Os) Exit(code int) {
	osshim.Exit(code)
}

func (sh *Os) Getpagesize() int {
	return osshim.Getpagesize()
}

func (sh *Os) SameFile(fi1 os.FileInfo, fi2 os.FileInfo) bool {
	return osshim.SameFile(fi1, fi2)
}
